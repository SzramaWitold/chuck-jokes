// Package docs GENERATED BY SWAG; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/categories": {
            "post": {
                "description": "Create new user category",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Category"
                ],
                "summary": "Create",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Name",
                        "name": "Name",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "With the bearer started",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.Category"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/responses.Error"
                            }
                        }
                    }
                }
            }
        },
        "/categories/{ID}": {
            "get": {
                "description": "get category with jokes if access is set then for everyone otherwise for logged user only",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Category"
                ],
                "summary": "FindByUserIDAndCategoryID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Name",
                        "name": "Name",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "With the bearer started",
                        "name": "Authorization",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.Category"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/responses.Error"
                            }
                        }
                    }
                }
            },
            "put": {
                "description": "Add joke to category",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Category"
                ],
                "summary": "AddToCategory",
                "parameters": [
                    {
                        "type": "number",
                        "description": "JokeID",
                        "name": "JokeID",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "With the bearer started",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.Success"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/responses.Error"
                            }
                        }
                    }
                }
            },
            "delete": {
                "description": "Remove joke to category",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Category"
                ],
                "summary": "RemoveFromCategory",
                "parameters": [
                    {
                        "type": "number",
                        "description": "JokeID",
                        "name": "JokeID",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "With the bearer started",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.Success"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/responses.Error"
                            }
                        }
                    }
                }
            }
        },
        "/categories/{ID}/access": {
            "put": {
                "description": "Set time limit access for guest",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Category"
                ],
                "summary": "SetAccessCategory",
                "parameters": [
                    {
                        "type": "string",
                        "description": "With the bearer started",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.Success"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/responses.Error"
                            }
                        }
                    }
                }
            }
        },
        "/favourite": {
            "get": {
                "description": "get user favourites jokes",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "FindFavourites",
                "parameters": [
                    {
                        "type": "string",
                        "description": "With the bearer started",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.PaginateJokes"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.Error"
                        }
                    }
                }
            },
            "put": {
                "description": "Add new favourite joke",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "AddFavourite",
                "parameters": [
                    {
                        "type": "number",
                        "description": "JokeID",
                        "name": "JokeID",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "With the bearer started",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.Success"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/responses.Error"
                            }
                        }
                    },
                    "417": {
                        "description": "Expectation Failed",
                        "schema": {
                            "$ref": "#/definitions/responses.Error"
                        }
                    }
                }
            }
        },
        "/jokeoftheday": {
            "get": {
                "description": "get current joke of a day",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Joke"
                ],
                "summary": "GetJokeOfADay",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.Joke"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/responses.Error"
                            }
                        }
                    }
                }
            }
        },
        "/jokes": {
            "get": {
                "description": "Get list of jokes",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Joke"
                ],
                "summary": "FindAll",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.PaginateJokes"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.Error"
                        }
                    }
                }
            }
        },
        "/jokes/{ID}": {
            "get": {
                "description": "get specify joke",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Joke"
                ],
                "summary": "Find",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.Joke"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/responses.Error"
                            }
                        }
                    }
                }
            }
        },
        "/jokes/{ID}/statistic": {
            "get": {
                "description": "get statistic of the specify joke",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Joke"
                ],
                "summary": "GetStatistic",
                "parameters": [
                    {
                        "type": "string",
                        "description": "With the bearer started",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.JokeStatistic"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/responses.Error"
                            }
                        }
                    }
                }
            }
        },
        "/login": {
            "post": {
                "description": "get jwt token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Login",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Username",
                        "name": "Username",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Password",
                        "name": "Password",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.Token"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.Error"
                        }
                    }
                }
            }
        },
        "/me": {
            "get": {
                "description": "get information about user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "GetMe",
                "parameters": [
                    {
                        "type": "string",
                        "description": "With the bearer started",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.User"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.Error"
                        }
                    }
                }
            }
        },
        "/register": {
            "post": {
                "description": "create new user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Register",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Username",
                        "name": "Username",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Name",
                        "name": "Name",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Password",
                        "name": "Password",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.Success"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/responses.Error"
                            }
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "responses.Category": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "userID": {
                    "type": "integer"
                }
            }
        },
        "responses.Error": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "responses.Joke": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "updatedAt": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "responses.JokeStatistic": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "favourite": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "shows": {
                    "type": "integer"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "responses.PaginateJokes": {
            "type": "object",
            "properties": {
                "page": {
                    "type": "integer"
                },
                "perPage": {
                    "type": "integer"
                },
                "rows": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/responses.Joke"
                    }
                },
                "totalPages": {
                    "type": "integer"
                },
                "totalRows": {
                    "type": "integer"
                }
            }
        },
        "responses.Success": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "responses.Token": {
            "type": "object",
            "properties": {
                "refreshTTL": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                },
                "ttl": {
                    "type": "string"
                }
            }
        },
        "responses.User": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Chuck jokes api doc",
	Description:      "Chuck jokes manage api",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
